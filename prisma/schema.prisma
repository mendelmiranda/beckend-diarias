generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bancos {
  cod          Int            @id @default(autoincrement())
  banco        String?        @db.VarChar(120)
  conta_diaria conta_diaria[]
}

model log_sistema {
  id       Int      @id @default(autoincrement())
  linha    String
  operacao String
  usuario  String
  datareg  DateTime @default(now()) @db.Timestamptz(3)
}

model anexo_evento {
  id           Int      @id @default(autoincrement())
  categoria    String?
  descricao    String?
  datareg      DateTime @default(now()) @db.Timestamptz(3)
  api_anexo_id Int
  filename     String
  evento       evento   @relation(fields: [evento_id], references: [id], onDelete: Cascade)
  evento_id    Int
}

model conta_diaria {
  id         Int    @id @default(autoincrement())
  nome       String @db.VarChar(200)
  cpf        String @db.VarChar(20)
  tipo       String @db.Char(1)
  tipo_conta String
  agencia    String @db.VarChar(20)
  conta      String @db.VarChar(20)

  participante_id Int
  participante    participante @relation(fields: [participante_id], references: [id], onDelete: Cascade)

  banco_id Int
  banco    bancos @relation(fields: [banco_id], references: [cod])
}

model pais {
  id      Int      @id @default(autoincrement())
  nome    String?  @db.VarChar(60)
  nome_pt String?  @db.VarChar(60)
  sigla   String?  @db.VarChar(2)
  bacen   Int?
  evento  evento[]
  viagem  viagem[]
}

model tipo_evento {
  id        Int      @id @unique @default(autoincrement())
  descricao String?  @db.VarChar(60)
  eventos   evento[]
}

model estado {
  id           Int            @id @default(autoincrement())
  descricao    String         @db.VarChar(50)
  uf           String         @db.Char(2)
  cidade       cidade[]
  participante participante[]
}

model cidade {
  id        Int    @unique @default(autoincrement())
  estado_id Int
  descricao String @db.VarChar(50)
  estado    estado @relation(fields: [estado_id], references: [id])

  eventos      evento[]
  participante participante[]

  origem  viagem[] @relation("cidori")
  destino viagem[] @relation("ciddest")

  @@id([id, estado_id])
}

model solicitacao {
  id                         Int                          @default(autoincrement())
  datareg                    DateTime?                    @default(now()) @db.Timestamptz(3)
  justificativa              String
  status                     String
  cpf_responsavel            String?
  nome_responsavel           String?
  cod_lotacao                Int?
  lotacao                    String?
  login                      String?
  eventos                    evento[]
  tramite                    tramite[]
  correcao_solicitacao       correcao_solicitacao[]
  empenho_daofi              empenho_daofi[]
  eventos_juntos             eventos_juntos[]
  aprovacao_definitiva       aprovacao_definitiva[]
  viagem                     viagem[]
  solicitacao_condutores     solicitacao_condutores[]
  encaminhar_solicitacao     encaminhar_solicitacao[]
  aprovacao_definitiva_darad aprovacao_definitiva_daof[]

  @@id([id])
}

model empenho_daofi {
  id                Int       @unique @default(autoincrement())
  datareg           DateTime? @default(now()) @db.Timestamptz(3)
  tipo              String
  saldo_inicial     Float
  valor_reservado   Float
  valor_pos_reserva Float?

  solicitacao    solicitacao @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  solicitacao_id Int

  acao       String?
  observacao String?

  @@id([id, solicitacao_id])
}

model tramite {
  id                  Int           @unique @default(autoincrement())
  cod_lotacao_origem  Int
  lotacao_origem      String
  cod_lotacao_destino Int
  lotacao_destino     String
  status              String
  datareg             DateTime      @default(now()) @db.Timestamptz(3)
  solicitacao         solicitacao   @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  solicitacao_id      Int
  log_tramite         log_tramite[]

  @@id([id])
}

model log_tramite {
  id                  Int      @unique @default(autoincrement())
  nome                String
  cod_lotacao_origem  Int
  lotacao_origem      String
  cod_lotacao_destino Int
  lotacao_destino     String
  status              String
  datareg             DateTime @default(now()) @db.Timestamptz(3)
  tramite             tramite  @relation(fields: [tramite_id], references: [id])
  tramite_id          Int

  @@id([id])
}

model correcao_solicitacao {
  id             Int         @unique @default(autoincrement())
  solicitacao    solicitacao @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  solicitacao_id Int
  texto          String?
  status         String //AGUARDANDO_CORRECAO | CORRIGIDO
  datareg        DateTime    @default(now()) @db.Timestamptz(3)

  @@id([id])
}

model aeroporto {
  id     Int    @unique @default(autoincrement())
  uf     String
  estado String
  cidade String

  origem  viagem[] @relation("ori")
  destino viagem[] @relation("dest")
}

model evento {
  id                    Int         @default(autoincrement())
  tipo_evento_id        Int
  tipo_evento           tipo_evento @relation(fields: [tipo_evento_id], references: [id])
  solicitacao_id        Int
  solicitacao           solicitacao @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  titulo                String
  inicio                DateTime
  fim                   DateTime
  exterior              String
  local_exterior        String?
  cidade_id             Int?
  cidade                cidade?     @relation(fields: [cidade_id], references: [id])
  pais_id               Int
  pais                  pais        @relation(fields: [pais_id], references: [id])
  informacoes           String
  datareg               DateTime    @default(now()) @db.Timestamptz(3)
  tem_passagem          String?     @db.Char(3)
  valor_total_inscricao Float?
  valor_evento          Float?
  observacao_valor      String?

  evento_participantes evento_participantes[]
  anexo_evento         anexo_evento[]
  eventos_juntos       eventos_juntos[]

  @@id([id])
}

model eventos_juntos {
  id              Int           @unique @default(autoincrement())
  solicitacao_id  Int
  solicitacao     solicitacao   @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  evento          evento        @relation(fields: [evento_id], references: [id], onDelete: Cascade)
  evento_id       Int
  participante    participante? @relation(fields: [participante_id], references: [id])
  participante_id Int?
  data_inicial    DateTime
  data_final      DateTime

  datareg DateTime @default(now()) @db.Timestamptz(3)

  @@id([id])
}

model participante {
  id              Int      @id @default(autoincrement())
  nome            String
  cpf             String
  data_nascimento DateTime
  matricula       Int?
  lotacao         String?
  cargo           String?
  classe          String?
  tipo            String   @db.Char(1)

  estado_id                Int?
  estado                   estado? @relation(fields: [estado_id], references: [id])
  cidade_id                Int?
  cidade                   cidade? @relation(fields: [cidade_id], references: [id])
  endereco                 String?
  recebe_diarias_na_origem String? @db.Char(3)
  profissao                String?
  local_trabalho           String?
  email                    String?
  telefone                 String?
  rg                       String?
  funcao                   String?
  efetivo                  String?

  evento_participantes evento_participantes[]
  conta_diaria         conta_diaria[]
  eventos_juntos       eventos_juntos[]
}

model evento_participantes {
  id        Int    @unique @default(autoincrement())
  evento_id Int
  evento    evento @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  participante_id Int
  participante    participante @relation(fields: [participante_id], references: [id], onDelete: Cascade)

  viagem_participantes viagem_participantes[]

  @@id([id, evento_id, participante_id])
}

model viagem {
  id        Int        @id @default(autoincrement())
  origem_id Int?
  origem    aeroporto? @relation("ori", fields: [origem_id], references: [id])

  destino_id Int?
  destino    aeroporto? @relation("dest", fields: [destino_id], references: [id])

  cidade_origem_id Int?
  cidade_origem    cidade? @relation("cidori", fields: [cidade_origem_id], references: [id])

  cidade_destino_id Int?
  cidade_destino    cidade? @relation("ciddest", fields: [cidade_destino_id], references: [id])

  exterior       String?
  local_exterior String?
  pais_id        Int
  pais           pais    @relation(fields: [pais_id], references: [id])

  data_ida      DateTime
  data_volta    DateTime?
  justificativa String?

  viagem_diferente        String?   @db.Char(3)
  data_ida_diferente      DateTime?
  data_volta_diferente    DateTime?
  justificativa_diferente String?

  datareg               DateTime @default(now()) @db.Timestamptz(3)
  arcar_passagem        String?  @db.Char(3)
  custos                String[]
  servidor_acompanhando String?  @db.Char(3)

  viagem_superior          String? @db.Char(3)
  viagem_pernoite          String? @db.Char(3)
  justificativa_municipios String?

  valor_passagem Float?

  solicitacao    solicitacao? @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  solicitacao_id Int?

  trecho       String?
  deslocamento String? @db.Char(3)

  viagem_participantes viagem_participantes[]
  valor_viagem         valor_viagem[]
}

model valor_viagem {
  id               Int     @id @default(autoincrement())
  viagem_id        Int
  viagem           viagem  @relation(fields: [viagem_id], references: [id], onDelete: Cascade)
  tipo             String? //PASSAGEM OU DI√ÅRIA
  destino          String? //NACIONAL OU INTERNACIONAL
  valor_individual Float?
  valor_grupo      Float?
  cotacao_dolar    Float?
  justificativa    String?
}

model viagem_participantes {
  id Int @unique @default(autoincrement())

  evento_participantes_id Int
  evento_participantes    evento_participantes @relation(fields: [evento_participantes_id], references: [id], onDelete: Cascade)

  viagem_id Int
  viagem    viagem @relation(fields: [viagem_id], references: [id], onDelete: Cascade)

  datareg DateTime @default(now())

  @@id([id, evento_participantes_id, viagem_id])
}

model valor_diarias {
  id Int @unique @default(autoincrement())

  dentro        Float
  fora          Float
  internacional Float?
  datareg       DateTime        @default(now()) @db.Timestamptz(3)
  cargo_diarias cargo_diarias[]

  @@id([id])
}

model cargo_diarias {
  id Int @unique @default(autoincrement())

  cargo  String
  funcao String?

  valor_diarias_id Int
  valor_diarias    valor_diarias @relation(fields: [valor_diarias_id], references: [id])

  @@id([id])
}

model assinatura {
  id                         Int                          @unique @default(autoincrement())
  presidente_exercicio       String
  datareg                    DateTime                     @default(now()) @db.Timestamptz(3)
  ativo                      String                       @db.Char(3)
  aprovacao_definitiva       aprovacao_definitiva[]
}

model aprovacao_definitiva {
  id Int @unique @default(autoincrement())

  assinatura_id Int
  assinatura    assinatura @relation(fields: [assinatura_id], references: [id], onDelete: Cascade)
  datareg       DateTime   @default(now())
  hora          String

  solicitacao    solicitacao? @relation(fields: [solicitacao_id], references: [id])
  solicitacao_id Int
}

model condutores {
  id                     Int                      @unique @default(autoincrement())
  nome                   String
  cpf                    String
  validade_cnh           DateTime?
  categoria_cnh          String?
  matricula              String?
  celular                String?
  endereco               String?
  banco                  String?
  agencia                String?
  conta                  String?
  tipo                   String?                  @db.Char(1)
  solicitacao_condutores solicitacao_condutores[]
}

model solicitacao_condutores {
  id            Int        @unique @default(autoincrement())
  condutores_id Int
  condutores    condutores @relation(fields: [condutores_id], references: [id], onDelete: Cascade)

  solicitacao_id Int
  solicitacao    solicitacao @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  veiculo        String?

  @@id([id, condutores_id, solicitacao_id])
}

model encaminhar_solicitacao {
  id                  Int         @unique @default(autoincrement())
  solicitacao_id      Int
  solicitacao         solicitacao @relation(fields: [solicitacao_id], references: [id], onDelete: Cascade)
  datareg             DateTime    @default(now()) @db.Timestamptz(3)
  usuario             String
  justificativa       String
  cod_lotacao_origem  Int
  lotacao_origem      String
  cod_lotacao_destino Int
  lotacao_destino     String
  lido                String      @db.Char(3)

  @@id([id, solicitacao_id])
}

model organograma {
  id Int @unique @default(autoincrement())

  pai_id   Int
  pai_nome String

  filho_id   Int
  filho_nome String

  @@id([id])
}

model assinatura_daof {
  id                         Int                          @unique @default(autoincrement())
  diretor                    String
  datareg                    DateTime                     @default(now()) @db.Timestamptz(3)
  ativo                      String                       @db.Char(3)
  aprovacao_definitiva_daof aprovacao_definitiva_daof[]
}

model aprovacao_definitiva_daof {
  id Int @unique @default(autoincrement())

  assinatura_id Int
  assinatura_daof    assinatura_daof @relation(fields: [assinatura_id], references: [id], onDelete: Cascade)
  datareg       DateTime   @default(now())
  hora          String

  solicitacao        solicitacao?      @relation(fields: [solicitacao_id], references: [id])
  solicitacao_id     Int
}
