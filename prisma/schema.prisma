generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bancos {
  cod          Int            @id @default(autoincrement())
  banco        String?        @db.VarChar(120)
  conta_diaria conta_diaria[]
}

model conta_diaria {
  id         Int    @id @default(autoincrement())
  nome       String @db.VarChar(200)
  cpf        String @db.VarChar(20)
  tipo       String @db.Char(1)
  tipo_conta String
  agencia    String @db.VarChar(20)
  conta      String @db.VarChar(20)

  banco_id Int
  banco    bancos @relation(fields: [banco_id], references: [cod])
}

model pais {
  id      Int      @id @default(autoincrement())
  nome    String?  @db.VarChar(60)
  nome_pt String?  @db.VarChar(60)
  sigla   String?  @db.VarChar(2)
  bacen   Int?
  evento  evento[]
  viagem  viagem[]
}

model tipo_evento {
  id        Int      @id @unique @default(autoincrement())
  descricao String?  @db.VarChar(60)
  eventos   evento[]
}

model estado {
  id           Int            @id @default(autoincrement())
  descricao    String         @db.VarChar(50)
  uf           String         @db.Char(2)
  cidade       cidade[]
  participante participante[]
}

model solicitacao {
  id                  Int                   @default(autoincrement())
  datareg             DateTime?             @default(now())
  justificativa       String
  status              String
  cpf_responsavel     String?
  nome_responsavel    String?
  cod_lotacao         Int?
  lotacao             String?
  eventos             evento[]
  tramite_solicitacao tramite_solicitacao[]

  @@id([id])
}

model tramite_solicitacao {
  id Int @unique @default(autoincrement())

  solicitacao_id Int
  solicitacao    solicitacao @relation(fields: [solicitacao_id], references: [id])

  cod_lotacao Int
  lotacao     String

  datareg DateTime @default(now())

  @@id([id, solicitacao_id])
}

model cidade {
  id        Int    @unique @default(autoincrement())
  estado_id Int
  descricao String @db.VarChar(50)
  estado    estado @relation(fields: [estado_id], references: [id])

  eventos      evento[]
  participante participante[]

  @@id([id, estado_id])
}

model aeroporto {
  id             Int     @unique @default(autoincrement())
  iata           String?
  icao           String?
  nome_aeroporto String
  cidade         String
  uf             String

  origem  viagem[] @relation("ori")
  destino viagem[] @relation("dest")
}

model evento {
  id             Int         @default(autoincrement())
  tipo_evento_id Int
  tipo_evento    tipo_evento @relation(fields: [tipo_evento_id], references: [id])
  solicitacao_id Int
  solicitacao    solicitacao @relation(fields: [solicitacao_id], references: [id])
  titulo         String
  inicio         DateTime
  fim            DateTime
  exterior       String
  local_exterior String?
  cidade_id      Int?
  cidade         cidade?     @relation(fields: [cidade_id], references: [id])
  pais_id        Int
  pais           pais        @relation(fields: [pais_id], references: [id])
  informacoes    String
  datareg        DateTime    @default(now())
  tem_passagem   String?     @db.Char(3)

  evento_participantes evento_participantes[]

  @@id([id])
}

model participante {
  id              Int      @id @default(autoincrement())
  nome            String
  cpf             String
  data_nascimento DateTime
  matricula       Int?
  lotacao         String?
  cargo           String?
  classe          String?
  tipo            String   @db.Char(1)

  estado_id                Int?
  estado                   estado? @relation(fields: [estado_id], references: [id])
  cidade_id                Int?
  cidade                   cidade? @relation(fields: [cidade_id], references: [id])
  endereco                 String?
  recebe_diarias_na_origem String? @db.Char(3)
  profissao                String?
  local_trabalho           String?

  evento_participantes evento_participantes[]
}

model evento_participantes {
  id        Int    @unique @default(autoincrement())
  evento_id Int
  evento    evento @relation(fields: [evento_id], references: [id])

  participante_id Int
  participante    participante @relation(fields: [participante_id], references: [id], onDelete: Cascade)
  valor_diaria    Float? //<======deve colocar obrigatório em produção

  viagem_participantes viagem_participantes[]

  @@id([id, evento_id, participante_id])
}

model viagem {
  id        Int       @id @default(autoincrement())
  origem_id Int
  origem    aeroporto @relation("ori", fields: [origem_id], references: [id])

  destino_id Int
  destino    aeroporto @relation("dest", fields: [destino_id], references: [id])

  exterior       String
  local_exterior String?
  pais_id        Int
  pais           pais    @relation(fields: [pais_id], references: [id])

  trecho         String
  data_ida       DateTime
  data_volta     DateTime?
  justificativa  String?
  datareg        DateTime  @default(now())
  arcar_passagem String?   @db.Char(3)
  custos         String[]

  viagem_participantes viagem_participantes[]
}

model viagem_participantes {
  id Int @unique @default(autoincrement())

  evento_participantes_id Int
  evento_participantes    evento_participantes @relation(fields: [evento_participantes_id], references: [id], onDelete: Cascade)

  viagem_id Int
  viagem    viagem @relation(fields: [viagem_id], references: [id], onDelete: Cascade)

  datareg DateTime @default(now())

  @@id([id, evento_participantes_id, viagem_id])
}
